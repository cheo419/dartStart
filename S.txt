#0
void : 리턴이 없는 자료형.
모든코드는 main 함수 안에 들어가야 한다.

#1
함수나 메소드 내부에 지역 변수를 선언할때에는 var사용,
class에서 변수나 property를 선언할때에는 타입을 지정(ex:String, int),
var를 사용하는게 dart 스타일가이드 권장 방식 (컴파일러가 어차피 타입을 알기때문).

dynamic = 인터넷에서 어떤 데이터를 받았는데 그 데이터가 어떻게 생겼는지 모르겠다면 dynamic을 이용하면 dart가 데이터 타입을 확인할수 있도록 도와줌,
여러가지 타입을 가질수있는 변수이고 '정말 필요할때만 사용'

Null safety = 어떤변수 혹은 데이터가 null이 될수있음을 명시, 개발자가 null 값을 참조할수없도록 하는것이며 String 뒤에 ? 를 붙혀줌으로서 name이 String 또는 null이 될수있다고 명시해준것

final = var 대신 final로 변수를 만들게 되면 이 변수는 수정할수없게된다.(딱한번만 설정할수있음) == 자바스크립트 const랑 비슷

late = 초기 데이터 없이 먼저 변수를 생성하고 추후에 데이터를 넣을 때 주로 사용함
flutter로 data fecthing을 할 때 유용하고
late 변수를 만들고 API에 요청을 보낸 뒤에 API에서 값을 보내주면 그 응답값을 late변수에 넣어 사용할 수 있다.
느낌상 이변수는 null이면 안되고 나중에라도 값이 할당되어야해 하고 명시하는느낌

const = dart의 const는 자바스크립트나 타입스크립트와 다름
자바스크립트나 타입스크립트의 const는 다트의 final과 비슷
dart 의 const는 compile-time constant를 만들어주고 이뜻은 컴파일할때 알고있는 값에 사용해야한단 뜻
만약 어떤 값인지 모르고 그 값이 API로부터 오거나 사용자가 화면에서 입력해야 하는 값이라면 그건 const가 아닌 final이나 var가 되어야 한다.

#1복습
final: 값을 재할당하지 못하는 변수를 만듦
dynamic type: 어떤 타입의 데이터가 들어올 지 모를 때 사용함
const: 컴파일 할 때 값을 알고 있는 변수
final: 런타임 중에 만들어질 수 있는 변수
late: final, var, String같은 것들 앞에 써줄 수 있는 수식어로서 어떤 데이터가 올 지 모를 때 사용한다.

#2
데이터타입 (우클릭 후 type definition을 누르면 자세한 설명이 나옴)
대부분 타입들은 객체(object)로 이루어져있다(함수도 객체)
이것이 Dart가 객체 지향 언어로 불리는 이유

List = 
numbers.add(1); 이런식으로 추가가능 하지만 var를 썼을때만
List<int>를 썼을땐 불가능,
number.last; 가끔 마지막 요소를 가져와야하는데 요소가 몇개있는지 모를때 씀,
tip)만약 vscode나 dartPad를 사용한다면 맨 끝을 쉽표로 마무리하면 유용하다
예를들어 var numbers = [1,2,3,]; 이런식으로,
collection if를 사용하면 존재할수도 안할수도 있는 요소를 가져올수있다.

String interpolation = text에 변수를 추가하는 방법
변수값을 담고싶다면 $ 를 적고 그뒤에 변수이름을 적으면 된다,
만약 무언가를 계산하고 싶은거라면 달러기호를 적고 중괄호적고 계산할 내용을
그안에 적으면 된다.

collection for = 전에 collection If와 같이 배열안에 For문을 넣을 수 있는 기능, 대표적으로 UI를 만들 때 유용하게 사용된다. 파이썬 for i in과 같은 방식

Maps = 자바스크립트나 타입스크립트의 object, 파이썬의 dictionary 같은거임
key와 value로 이루어졌는데 key는 String, value는 object로 이루어졌다.
key와 value를 가지는 구조로 object를 만들때 그리고 그것들이 특정 형태를 가질때 players,movies,photos 같이 API로 얻은 데이터는 class를 추천

Sets = Set에 속한 모든 아이템들이 유니크해야될 때 사용한다.
유니크할 필요가 없다면 List를 사용하면 된다,
Dart에서 List는 Python의 List와 같고
Dart에서 Set은 Python의 Tuple과 같다.

#3
Function = Dart는 진정한 객체 지향 언어이므로 함수도 객체이며 타입이 Function입니다. 이는 함수를 변수에 할당하거나 다른 함수에 인수로 전달할 수 있음을 의미합니다.
ex) 하나의 표현식만 포함하는 함수의 경우 아래와 같이 단축 구문을 사용할 수 있습니다. (리턴을 지우고 중괄호를 없애고 =>(fat arrow syntax)를 쓴다.)
String sayHello(String name) => "Hello ${name} nice to meet you.";

Named Parameters = dart의 function은 named parameter라는걸 지원함 flutter에서 자주 사용되는 개념.
tip) dart는 null safety때문에 null을 허용하지않음 그래서 null을 허용할수있게 만들어줘야함, 또한
명시적으로 required로 표시되지 않는 한 선택 사항이다 기본값을 제공하지 않거나 Named parameters를 필수로 표시하지 않으면 해당 유형은 기본값이 null이 되므로 null을 허용해야 합니다.
tip)named argument 쓰는법은 인수에 중괄호를 치고 메인에 명시를 한다

optional positional parameters = Dart에서 [] 은 optional, positional parameter를 명시할 때 사용된다.
name, age는 필수값이고 []를 통해 country를 optional값으로 지정해줄 수 있다.

?? Operator =
?? 연산자를 이용하면 왼쪽 값이 null인지 체크해서 null이 아니면 왼쪽 값을 리턴하고 null이면 오른쪽 값을 리턴한다.
??= 연산자를 이용하면 변수 안에 값이 null일 때를 체크해서 값을 할당해줄 수 있다.

Typedef = 자료형에 사용자가 원하는 alias를 붙일 수 있게 해준다. (자료형 이름의 별명을 만들 때 사용)

#4
dart에서 property를 선언할 때는 타입을 사용해서 정의한다.
method내에서 같은이름의 변수가 있어서 어쩔수없이 사용하는게 아닌이상 class method안에서는 this를 쓰지 않는 것을 권장함!

Constructors = dart에서 생성자(constructor) 함수는 클래스 이름과 같아야 한다.
tip) late를 사용하지 않은 이유는 Player(this.name, this.xp); 컨스트럭터를 만들 때, 변수에 값을 할당하지 않았기 때문인 것 같음
이전에는
this.name = name; 식으로 값을 할당했기 때문에...
위에서 먼저 선언한 변수에서는 late 라고 했어야 되지만,
지금 constructor는 변수에 값을 할당하지 않으니, 오류가 안나므로 late를 사용하지 않아도 되는 것


